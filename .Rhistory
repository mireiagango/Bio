knitr::opts_chunk$set(echo = TRUE)
if(!require(BiocManager)){
install.packages("BiocManager", dep=TRUE)
}
installifnot <- function (pckgName, BioC=TRUE){
if(BioC){
if(!require(pckgName, character.only=TRUE)){
BiocManager::install(pckgName)
}
}else{
if(!require(pckgName, character.only=TRUE)){
install.packages(pckgName, dep=TRUE)
}
}
}
libraries<- c("limma","edgeR","Glimma","Mus.musculus")
for(i in libraries){
print(i)
installifnot(i)
library(i, character.only = TRUE, quietly = TRUE)
}
library(limma)   # Linear models for differential expression
library(Glimma)  # Interactive plots for exploration
library(edgeR)   # Process count data from NGS experiments
library(Mus.musculus)
library(RColorBrewer)
library(gplots)
setwd(params$path_in)
mydata<-read.delim2("GSE116583_transplant.am.htseq.all.rpkm.txt",
header=T, sep="\t" ,dec=".")
x<- DGEList(counts=mydata[, 2:13 ], group=rep(1:3,each=4))
str(x)
rownames(x) <- mydata[,1]
mydata<-read.delim2("GSE116583_transplant.am.htseq.all.rpkm.txt",
header=T, sep="\t" ,dec=".")
x<- DGEList(counts=mydata[, 2:13 ], group=rep(1:3,each=4))
rownames(x) <- mydata[,1]
group<-x$samples$group
cpm <- cpm(x)
lcpm <- cpm(x, log = TRUE)
# Only keep genes that fit the criteria
keep.exprs <- rowSums(cpm >= 1) >= 6
#6=50% de 12 que és el nombre de mostres
x <- x[keep.exprs, , keep.lib.sizes = FALSE]
dim(x)
#RPKM atualitzats
cpm <- cpm(x)
lcpm <- cpm(x, log = TRUE)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = geneid,
columns = c("SYMBOL", "TXCHROM"),
keytype = "ENTREZID")
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "TXCHROM","ENTREZID"),
keytype = "ENSEMBL")
head(genes)
sel<-which(duplicated(genes$ENSEMBL))
genes[sel,]
genes <- genes[!duplicated(genes$ENSEMBL), ]
x$genes <- genes
genes <- genes[!duplicated(genes$ENTREZID), ]
dim(genes)
r dim(genes[sel,])[1]
genes <- genes[!duplicated(genes$ENTREZID), ]
dim(genes)
dim(genes[sel,])[1]
genes <- genes[!duplicated(genes$ENTREZID), ]
#dim(genes)
dim(genes[sel,])[1]
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = geneid,
columns = c("SYMBOL", "TXCHROM"),
keytype = "ENTREZID")
dim(genes)
dim(genes)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = geneid,
columns = c("SYMBOL", "TXCHROM"),
keytype = "ENTREZID")
dim(genes)
genes <- genes[!duplicated(genes$ENTREZID), ]
dim(genes)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "TXCHROM","ENTREZID"),
keytype = "ENSEMBL")
dim(genes)
genes <- genes[!duplicated(genes$ENTREZID), ]
dim(genes)
#Nombre d'obserbacions i variables abans d'eliminar duplicats
genes1<-genes
dim(genes1)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "TXCHROM","ENTREZID"),
keytype = "ENSEMBL")
#Nombre d'obserbacions i variables abans d'eliminar duplicats
genes1<-genes
dim(genes1)
dim(genes)[1]-dim(genes)[1]
dim(genes1)[1]-dim(genes)[1]
dim(genes1)[1]-dim(genes)[1]
dim(genes1)[1]-dim(genes)[1]
dim(genes1)[1]-dim(genes)[1]
dim(genes)[1]-dim(genes1)[1]
dim(genes)-dim(genes1)
13797-11811
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "CROMOSOMA","ENTREZID"),
keytype = "ENSEMBL")
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "CROMOSOMA","ENTREZID"),
keytype = "ENSEMBL")
geneid <- rownames(x)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "TXCHROM","ENTREZID"),
keytype = "ENSEMBL")
#Nombre d'obserbacions i variables abans d'eliminar duplicats
genes1<-genes
dim(genes1)
#Nombre d'obserbacions i variables després
genes <- genes[!duplicated(genes$ENTREZID), ]
dim(genes)
# Visualize distribution of gene expression levels
plotDensities(lcpm, legend = FALSE, main = "Before filtering")
abline(v = 0, lty = 3)
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
#Amb brewer.pal, creem una paleta de colors per al grafic
col.group <- as.character(col.group)
plotMDS(lcpm, col = col.group,
main = "group",pch = as.numeric(group))
legend("bottomright",legend = unique(group), pch = c(3,2,1),
col = unique(col.group), cex = 0.5)
# Construct linear model ---------------------------------------------
design <- model.matrix(~0 + group + lane)
# Visualize sample relationships with multidimensional scaling (MDS).
library("RColorBrewer")
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
samplenames
colnames(x) <- samplenames
x$samples$group <- group
lane <- as.factor(rep(c("L004", "L006", "L008"), c(4, 4, 4)))
x$samples$lane <- lane
x$samples
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
lane
col.lane <- lane
levels(col.lane) <- brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels = group, col = col.group,
main = "group")
plotMDS(lcpm, labels = lane, col = col.lane, dim = c(3, 4),
main = "lane")
# Construct linear model ---------------------------------------------
design <- model.matrix(~0 + group + lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts= contr.matrix)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
# Construct linear model ---------------------------------------------
design <- model.matrix(~0 + group + lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
#Amb brewer.pal, creem una paleta de colors per al grafic
col.group <- as.character(col.group)
plotMDS(lcpm, col = col.group,
main = "group",pch = as.numeric(group))
legend("bottomright",legend = unique(group), pch = c(3,2,1),
col = unique(col.group), cex = 0.5)
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
setwd(params$path_in)
group <- as.factor(rep(c("Naive_cont", "dosH", "dia"),c(4,4,4)))
x$samples$group <- group
x$countslog<-log2(x$counts)
plotDensities(x$countslog, legend = FALSE, main = "Before filtering")
abline(v = 0, lty = 3)
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
keep.exprs <- rowSums(cpm>=1)>5
x$counts <- x$counts[keep.exprs,]
dim(x$counts)
x$countslog<-log2(x$counts)
# sample distributions
plotDensities(x$countslog, legend = FALSE, main = "After filtering")
abline(v = 0, lty = 3)
cpm <- cpm(x)
lcpm <- cpm(x, log = T)
genes <- select(Mus.musculus, keys = rownames(x),
columns = c("SYMBOL", "TXCHROM","ENTREZID"),
keytype = "ENSEMBL")
head(genes)
sel<-which(duplicated(genes$ENSEMBL))
genes[sel,]
genes <- genes[!duplicated(genes$ENSEMBL), ]
x$genes <- genes
boxplot(lcpm, las=2, main = "Distribucio after filtering")
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
#Amb brewer.pal, creem una paleta de colors per al grafic
col.group <- as.character(col.group)
plotMDS(lcpm, col = col.group,
main = "group",pch = as.numeric(group))
legend("bottomright",legend = unique(group), pch = c(3,2,1),
col = unique(col.group), cex = 0.5)
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
contr.matrix
# Construct linear model ---------------------------------------------
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
v <- voom(x, design, plot=TRUE)
# Construct linear model ---------------------------------------------
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(diavsdosH = dia - dosH,
diavsNaive = dia - Naive_cont,
NaivevsdosH = Naive_cont - dosH,
levels = colnames(design))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit)
# Tabulate the results
summary(decideTests(efit))
tfit <- treat(vfit, lfc = 1)
dt <- decideTests(tfit)
summary(dt)
# Create a venn diagram of the results.
head(dt)
de.common <- which(dt[, 1] != 0 & dt[, 2] != 0)
length(de.common)
# Create a venn diagram of the results.
head(dt,n=10)
#Top 10 gens d'acord amb el p-valor ajustat
topTreat(tfit, coef = 1, n = 10) #diavsdosH
topTreat(tfit, coef = 2, n = 10) #diavsNaive
topTreat(tfit, coef = 3, n = 10) #NaivevsdosH
topcontrvsdos <-topTreat(tfit, coef = 3, n = Inf)
glMDPlot(tfit, coef = 1, status = dt, main = colnames(tfit)[1],
side.main = "ENTREZID", counts = x$counts, groups = group,
launch = TRUE)
load(url("http://bioinf.wehi.edu.au/software/MSigDB/mouse_c2_v5p1.rdata"))
idx <- ids2indices(Mm.c2,id=rownames(v))
cam.BasalvsLP <- camera(v,idx,design,contrast=contr.matrix[,1])
load(url("http://bioinf.wehi.edu.au/software/MSigDB/mouse_c2_v5p1.rdata"))
idx <- ids2indices(Mm.c2,id=v$genes$ENTREZID)
cam.contvsdos <- camera(v,idx,design,contrast=contr.matrix[,3])
head(cam.contvsdos,5)
barcodeplot(efit$t[,3], index=idx$LIM_MAMMARY_LUMINAL_MATURE_UP,
main="NAIVEvs2")
barcodeplot(efit$t[,3], index=idx$LIM_MAMMARY_LUMINAL_MATURE_DN,
main="NAIVEvs2")
glMDPlot(tfit, coef = 1, status = dt, main = colnames(tfit)[1],
side.main = "ENTREZID", counts = x$counts, groups = group,
launch = TRUE)
glMDPlot(tfit, coef = 1, status = dt, main = colnames(tfit)[1],
side.main = "ENTREZID", counts = x$counts, groups = group,
launch = F)
View(mydata)
